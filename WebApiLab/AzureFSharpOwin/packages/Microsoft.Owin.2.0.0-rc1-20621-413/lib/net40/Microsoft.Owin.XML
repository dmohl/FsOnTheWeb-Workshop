<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Owin</name>
    </assembly>
    <members>
        <member name="T:System.Reflection.AssemblyMetadataAttribute">
            <summary>
            Provided as a down-level stub for the 4.5 AssemblyMetaDataAttribute class.
            All released assemblies should define [AssemblyMetadata(“Servicing”,”true”)].
            </summary>
        </member>
        <member name="T:Microsoft.Owin.OwinStartupAttribute">
            <summary>
            Used to mark which class in an assembly should be used for automatic startup.
            </summary>
        </member>
        <member name="M:Microsoft.Owin.OwinStartupAttribute.#ctor(System.Type)">
            <summary>
            
            </summary>
            <param name="startupType">The startup class</param>
        </member>
        <member name="M:Microsoft.Owin.OwinStartupAttribute.#ctor(System.String,System.Type)">
            <summary>
            
            </summary>
            <param name="friendlyName">A non-default configuration, e.g. staging.</param>
            <param name="startupType">The startup class</param>
        </member>
        <member name="M:Microsoft.Owin.OwinStartupAttribute.#ctor(System.Type,System.String)">
            <summary>
            
            </summary>
            <param name="startupType">The startup class</param>
            <param name="methodName">Specifies which method to call</param>
        </member>
        <member name="M:Microsoft.Owin.OwinStartupAttribute.#ctor(System.String,System.Type,System.String)">
            <summary>
            
            </summary>
            <param name="friendlyName">A non-default configuration, e.g. staging.</param>
            <param name="startupType">The startup class</param>
            <param name="methodName">Specifies which method to call</param>
        </member>
        <member name="P:Microsoft.Owin.OwinStartupAttribute.FriendlyName">
            <summary>
            A non-default configuration if any. e.g. Staging.
            </summary>
        </member>
        <member name="P:Microsoft.Owin.OwinStartupAttribute.StartupType">
            <summary>
            The startup class
            </summary>
        </member>
        <member name="P:Microsoft.Owin.OwinStartupAttribute.MethodName">
            <summary>
            The name of the configuration method
            </summary>
        </member>
        <member name="T:Owin.PipelineStage">
            <summary>
            An ordered list of known Asp.Net integrated pipeline stages.
            </summary>
        </member>
        <member name="F:Owin.PipelineStage.Authenticate">
            <summary>
            
            </summary>
        </member>
        <member name="F:Owin.PipelineStage.PostAuthenticate">
            <summary>
            
            </summary>
        </member>
        <member name="F:Owin.PipelineStage.Authorize">
            <summary>
            
            </summary>
        </member>
        <member name="F:Owin.PipelineStage.PostAuthorize">
            <summary>
            
            </summary>
        </member>
        <member name="F:Owin.PipelineStage.ResolveCache">
            <summary>
            
            </summary>
        </member>
        <member name="F:Owin.PipelineStage.PostResolveCache">
            <summary>
            
            </summary>
        </member>
        <member name="F:Owin.PipelineStage.MapHandler">
            <summary>
            
            </summary>
        </member>
        <member name="F:Owin.PipelineStage.PostMapHandler">
            <summary>
            
            </summary>
        </member>
        <member name="F:Owin.PipelineStage.AcquireState">
            <summary>
            
            </summary>
        </member>
        <member name="F:Owin.PipelineStage.PostAcquireState">
            <summary>
            
            </summary>
        </member>
        <member name="F:Owin.PipelineStage.PreHandlerExecute">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.Owin.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.Owin.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.Owin.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.Owin.Resources.Exception_ConversionTakesOneParameter">
            <summary>
              Looks up a localized string similar to Conversion delegate must take one parameter..
            </summary>
        </member>
        <member name="P:Microsoft.Owin.Resources.Exception_MiddlewareNotSupported">
            <summary>
              Looks up a localized string similar to The type &apos;{0}&apos; does not match any known middleware pattern..
            </summary>
        </member>
        <member name="P:Microsoft.Owin.Resources.Exception_NoConstructorFound">
            <summary>
              Looks up a localized string similar to The class &apos;{0}&apos; does not have a constructor taking {1} arguments..
            </summary>
        </member>
        <member name="P:Microsoft.Owin.Resources.Exception_NoConversionExists">
            <summary>
              Looks up a localized string similar to No conversion available between {0} and {1}..
            </summary>
        </member>
        <member name="T:Microsoft.Owin.Builder.AppBuilder">
            <summary>
            A standard implementation of IAppBuilder 
            </summary>
        </member>
        <member name="M:Microsoft.Owin.Builder.AppBuilder.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Owin.Builder.AppBuilder.#ctor(System.Collections.Generic.IDictionary{System.Tuple{System.Type,System.Type},System.Delegate},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            
            </summary>
            <param name="conversions"></param>
            <param name="properties"></param>
        </member>
        <member name="M:Microsoft.Owin.Builder.AppBuilder.Use(System.Object,System.Object[])">
            <summary>
            Adds a middleware node to the OWIN function pipeline. The middleware are
            invoked in the order they are added: the first middleware passed to Use will
            be the outermost function, and the last middleware passed to Use will be the
            innermost.
            </summary>
            <param name="middleware">
            The middleware parameter determines which behavior is being chained into the
            pipeline. 
            
            If the middleware given to Use is a Delegate, then it will be invoked with the "next app" in 
            the chain as the first parameter. If the delegate takes more than the single argument, 
            then the additional values must be provided to Use in the args array.
            
            If the middleware given to Use is a Type, then the public constructor will be 
            invoked with the "next app" in the chain as the first parameter. The resulting object
            must have a public Invoke method. If the object has constructors which take more than
            the single "next app" argument, then additional values may be provided in the args array.
            </param>
            <param name="args">
            Any additional args passed to Use will be passed as additional values, following the "next app"
            parameter, when the OWIN call pipeline is build.
            
            They are passed as additional parameters if the middleware parameter is a Delegate, or as additional
            constructor arguments if the middle parameter is a Type.
            </param>
            <returns>
            The IAppBuilder itself is returned. This enables you to chain your use statements together.
            </returns>
        </member>
        <member name="M:Microsoft.Owin.Builder.AppBuilder.New">
            <summary>
            The New method creates a new instance of an IAppBuilder. This is needed to create
            a tree structure in your processing, rather than a linear pipeline. The new instance share the
            same Properties, but will be created with a new, empty middleware list.
            
            To create a tangent pipeline you would first call New, followed by several calls to Use on 
            the new builder, ending with a call to Build on the new builder. The return value from Build
            will be the entry-point to your tangent pipeline. This entry-point may now be added to the
            main pipeline as an argument to a switching middleware, which will either call the tangent
            pipeline or the "next app", based on something in the request.
            
            That said - all of that work is typically hidden by a middleware like Map, which will do that
            for you.
            </summary>
            <returns>The new instance of the IAppBuilder implementation</returns>
        </member>
        <member name="M:Microsoft.Owin.Builder.AppBuilder.Build(System.Type)">
            <summary>
            The Build is called at the point when all of the middleware should be chained
            together. This is typically done by the hosting component which created the app builder,
            and does not need to be called by the startup method if the IAppBuilder is passed in.
            </summary>
            <param name="returnType">
            The Type argument indicates which calling convention should be returned, and
            is typically typeof(<typeref name="Func&lt;IDictionary&lt;string,object&gt;, Task&gt;"/>) for the OWIN
            calling convention.
            </param>
            <returns>
            Returns an instance of the pipeline's entry point. This object may be safely cast to the
            type which was provided
            </returns>
        </member>
        <member name="P:Microsoft.Owin.Builder.AppBuilder.Properties">
            <summary>
            Contains arbitrary properties which may added, examined, and modified by
            components during the startup sequence. 
            </summary>
        </member>
        <member name="T:Microsoft.Owin.Builder.NotFound">
            <summary>
            Simple object used by AppBuilder as seed OWIN callable if the
            builder.Properties["builder.DefaultApp"] is not set
            </summary>
        </member>
        <member name="T:Microsoft.Owin.Infrastructure.ISystemClock">
            <summary>
            Abstracts the system clock to facilitate testing.
            </summary>
        </member>
        <member name="P:Microsoft.Owin.Infrastructure.ISystemClock.UtcNow">
            <summary>
            Retrieves the current system time in UTC.
            </summary>
        </member>
        <member name="T:Microsoft.Owin.Infrastructure.SystemClock">
            <summary>
            Provides access to the normal system clock.
            </summary>
        </member>
        <member name="P:Microsoft.Owin.Infrastructure.SystemClock.UtcNow">
            <summary>
            Retrieves the current system time in UTC.
            </summary>
        </member>
        <member name="T:Microsoft.Owin.Infrastructure.WebUtilities">
            <summary>
            Response generation utilities.
            </summary>
        </member>
        <member name="M:Microsoft.Owin.Infrastructure.WebUtilities.AddQueryString(System.String,System.String)">
            <summary>
            Append the given query to the uri.
            </summary>
            <param name="uri"></param>
            <param name="queryString"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Owin.Infrastructure.WebUtilities.AddQueryString(System.String,System.String,System.String)">
            <summary>
            Append the given query key and value to the uri.
            </summary>
            <param name="uri"></param>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Owin.Infrastructure.WebUtilities.AddQueryString(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Append the given query keys and values to the uri.
            </summary>
            <param name="uri"></param>
            <param name="queryString"></param>
            <returns></returns>
        </member>
        <member name="T:Owin.IntegratedPipelineExtensions">
            <summary>
            Extension methods used to indicate at which stage in the integrated pipeline prior middleware should run.
            </summary>
        </member>
        <member name="M:Owin.IntegratedPipelineExtensions.UseStageMarker(Owin.IAppBuilder,System.String)">
            <summary>
            Call after other middleware to specify when they should run in the integrated pipeline.
            </summary>
            <param name="app"></param>
            <param name="stageName">The name of the integrated pipeline in which to run.</param>
            <returns>The original IAppBuilder for chaining.</returns>
        </member>
        <member name="M:Owin.IntegratedPipelineExtensions.UseStageMarker(Owin.IAppBuilder,Owin.PipelineStage)">
            <summary>
            Call after other middleware to specify when they should run in the integrated pipeline.
            </summary>
            <param name="app"></param>
            <param name="stage">The stage of the integrated pipeline in which to run.</param>
            <returns>The original IAppBuilder for chaining.</returns>
        </member>
        <member name="T:Microsoft.Owin.Logging.AppBuilderLoggerExtensions">
            <summary>
            Logging extension methods for IAppBuilder.
            </summary>
        </member>
        <member name="M:Microsoft.Owin.Logging.AppBuilderLoggerExtensions.SetLoggerFactory(Owin.IAppBuilder,Microsoft.Owin.Logging.ILoggerFactory)">
            <summary>
            Sets the server.LoggerFactory in the Properties collection.
            </summary>
            <param name="app"></param>
            <param name="loggerFactory"></param>
        </member>
        <member name="M:Microsoft.Owin.Logging.AppBuilderLoggerExtensions.GetLoggerFactory(Owin.IAppBuilder)">
            <summary>
            Retrieves the server.LoggerFactory from the Properties collection.
            </summary>
            <param name="app"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Owin.Logging.AppBuilderLoggerExtensions.CreateLogger(Owin.IAppBuilder,System.String)">
            <summary>
            Creates a new ILogger instance from the server.LoggerFactory in the Properties collection.
            </summary>
            <param name="app"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Owin.Logging.AppBuilderLoggerExtensions.CreateLogger(Owin.IAppBuilder,System.Type)">
            <summary>
            Creates a new ILogger instance from the server.LoggerFactory in the Properties collection.
            </summary>
            <param name="app"></param>
            <param name="component"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Owin.Logging.AppBuilderLoggerExtensions.CreateLogger``1(Owin.IAppBuilder)">
            <summary>
            Creates a new ILogger instance from the server.LoggerFactory in the Properties collection.
            </summary>
            <typeparam name="TType"></typeparam>
            <param name="app"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Owin.Logging.ILoggerFactory">
            <summary>
            Used to create logger instances of the given name.
            </summary>
        </member>
        <member name="M:Microsoft.Owin.Logging.ILoggerFactory.Create(System.String)">
            <summary>
            Creates a new ILogger instance of the given name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Owin.Logging.ILogger">
            <summary>
            A generic interface for logging.
            </summary>
        </member>
        <member name="M:Microsoft.Owin.Logging.ILogger.WriteCore(System.Diagnostics.TraceEventType,System.Int32,System.Object,System.Exception,System.Func{System.Object,System.Exception,System.String})">
            <summary>
            Aggregates most logging patterns to a single method.  This must be compatible with the Func representation in the OWIN environment.
            
            To check IsEnabled call WriteCore with only TraceEventType and check the return value, no event will be written.
            </summary>
            <param name="eventType"></param>
            <param name="eventId"></param>
            <param name="state"></param>
            <param name="exception"></param>
            <param name="formatter"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Owin.CookieOptions">
            <summary>
            Options used to create a new cookie.
            </summary>
        </member>
        <member name="M:Microsoft.Owin.CookieOptions.#ctor">
            <summary>
            Creates a default cookie with a path of '/'.
            </summary>
        </member>
        <member name="P:Microsoft.Owin.CookieOptions.Domain">
            <summary>
            The cookie domain.
            </summary>
        </member>
        <member name="P:Microsoft.Owin.CookieOptions.Path">
            <summary>
            The cookie path.
            </summary>
        </member>
        <member name="P:Microsoft.Owin.CookieOptions.Expires">
            <summary>
            The cookie expiration date.
            </summary>
        </member>
        <member name="P:Microsoft.Owin.CookieOptions.Secure">
            <summary>
            The cookie security requirement.
            </summary>
        </member>
        <member name="P:Microsoft.Owin.CookieOptions.HttpOnly">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.Owin.Logging.LoggerFactory">
            <summary>
            Provides a default ILoggerFactory.
            </summary>
        </member>
        <member name="P:Microsoft.Owin.Logging.LoggerFactory.Default">
            <summary>
            Provides a default ILoggerFactory based on System.Diagnostics.TraceSorce.
            </summary>
        </member>
        <member name="T:Owin.AppBuilderExtensions">
            <summary>
            Extension methods for IAppBuilder.
            </summary>
        </member>
        <member name="M:Owin.AppBuilderExtensions.Run(Owin.IAppBuilder,System.Object)">
            <summary>
            Attach the given application to the pipeline.  Nothing attached after this point will be executed.
            </summary>
            <param name="builder"></param>
            <param name="app"></param>
        </member>
        <member name="M:Owin.AppBuilderExtensions.Build(Owin.IAppBuilder)">
            <summary>
            The Build is called at the point when all of the middleware should be chained
            together. May be called to build pipeline branches.
            </summary>
            <param name="builder"></param>
            <returns>The request processing entry point for this section of the pipeline.</returns>
        </member>
        <member name="M:Owin.AppBuilderExtensions.Build``1(Owin.IAppBuilder)">
            <summary>
            The Build is called at the point when all of the middleware should be chained
            together. May be called to build pipeline branches.
            </summary>
            <typeparam name="TApp">The application signature.</typeparam>
            <param name="builder"></param>
            <returns>The request processing entry point for this section of the pipeline.</returns>
        </member>
        <member name="M:Owin.AppBuilderExtensions.BuildNew``1(Owin.IAppBuilder,System.Action{Owin.IAppBuilder})">
            <summary>
            Creates a new IAppBuilder instance from the current one and then invokes the configuration callback.
            </summary>
            <typeparam name="TApp">The application signature.</typeparam>
            <param name="builder"></param>
            <param name="configuration">The callback for configuration.</param>
            <returns>The request processing entry point for this section of the pipeline.</returns>
        </member>
        <member name="M:Owin.AppBuilderExtensions.AddSignatureConversion(Owin.IAppBuilder,System.Delegate)">
            <summary>
            Adds converters for adapting between disparate application signatures.
            </summary>
            <param name="builder"></param>
            <param name="conversion"></param>
        </member>
        <member name="M:Owin.AppBuilderExtensions.AddSignatureConversion``2(Owin.IAppBuilder,System.Func{``0,``1})">
            <summary>
            Adds converters for adapting between disparate application signatures.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <param name="builder"></param>
            <param name="conversion"></param>
        </member>
        <member name="M:Owin.AppBuilderExtensions.UseFunc``1(Owin.IAppBuilder,System.Func{``0,``0})">
            <summary>
            Specifies a middleware instance generator of the given type.
            </summary>
            <typeparam name="TApp">The application signature.</typeparam>
            <param name="builder"></param>
            <param name="middleware">A Func that generates a middleware instance given a reference to the next middleware.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Owin.Helpers.WebHelpers">
            <summary>
            Request processing helpers.
            </summary>
        </member>
        <member name="M:Microsoft.Owin.Helpers.WebHelpers.ParseNameValueCollection(System.String)">
            <summary>
            Parses an HTTP form body.
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Owin.Infrastructure.AppFuncTransition">
            <summary>
            Converts between an OwinMiddlware and an <typeref name="Func&lt;IDictionary&lt;string,object&gt;, Task&gt;"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Owin.OwinMiddleware">
            <summary>
            An abstract base class for a standard middleware pattern.
            </summary>
        </member>
        <member name="M:Microsoft.Owin.OwinMiddleware.#ctor(Microsoft.Owin.OwinMiddleware)">
            <summary>
            Instantiates the middleware with an optional pointer to the next component.
            </summary>
            <param name="next"></param>
        </member>
        <member name="M:Microsoft.Owin.OwinMiddleware.Invoke(Microsoft.Owin.OwinRequest,Microsoft.Owin.OwinResponse)">
            <summary>
            Process an individual request.
            </summary>
            <param name="request"></param>
            <param name="response"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Owin.OwinMiddleware.Next">
            <summary>
            The optional next component.
            </summary>
        </member>
        <member name="M:Microsoft.Owin.Infrastructure.AppFuncTransition.#ctor(System.Func{System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.Tasks.Task})">
            <summary>
            
            </summary>
            <param name="next"></param>
        </member>
        <member name="M:Microsoft.Owin.Infrastructure.AppFuncTransition.Invoke(Microsoft.Owin.OwinRequest,Microsoft.Owin.OwinResponse)">
            <summary>
            
            </summary>
            <param name="request"></param>
            <param name="response"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Owin.Infrastructure.OwinMiddlewareTransition">
            <summary>
            Transitions between <typeref name="Func&lt;IDictionary&lt;string,object&gt;, Task&gt;"/> and OwinMiddleware.
            </summary>
        </member>
        <member name="M:Microsoft.Owin.Infrastructure.OwinMiddlewareTransition.#ctor(Microsoft.Owin.OwinMiddleware)">
            <summary>
            
            </summary>
            <param name="next"></param>
        </member>
        <member name="M:Microsoft.Owin.Infrastructure.OwinMiddlewareTransition.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            
            </summary>
            <param name="environment"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Owin.Infrastructure.SignatureConversions">
            <summary>
            Adds adapters between <typeref name="Func&lt;IDictionary&lt;string,object&gt;, Task&gt;"/> and OwinMiddleware.
            </summary>
        </member>
        <member name="M:Microsoft.Owin.Infrastructure.SignatureConversions.AddConversions(Owin.IAppBuilder)">
            <summary>
            Adds adapters between <typeref name="Func&lt;IDictionary&lt;string,object&gt;, Task&gt;"/> and OwinMiddleware.
            </summary>
            <param name="app"></param>
        </member>
        <member name="T:Microsoft.Owin.OwinRequest">
            <summary>
            This wraps OWIN environment dictionary and provides strongly typed accessors.
            </summary>
        </member>
        <member name="M:Microsoft.Owin.OwinRequest.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Create a new environment wrapper exposing request properties.
            </summary>
            <param name="environment"></param>
        </member>
        <member name="M:Microsoft.Owin.OwinRequest.Get``1(System.String)">
            <summary>
            Gets a value from the OWIN environment, or returns default(T) if not present.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Owin.OwinRequest.Set``1(System.String,``0)">
            <summary>
            Sets the given key and value in the OWIN environment.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.Owin.OwinRequest.OnSendingHeaders(System.Action{System.Object},System.Object)">
            <summary>
            Registers for an event that fires when the response headers are sent.
            </summary>
            <param name="callback"></param>
            <param name="state"></param>
        </member>
        <member name="M:Microsoft.Owin.OwinRequest.OnSendingHeaders(System.Action)">
            <summary>
            Registers for an event that fires when the response headers are sent.
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:Microsoft.Owin.OwinRequest.GetCookies">
            <summary>
            Parses the Cookie header.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Owin.OwinRequest.GetQuery">
            <summary>
            Parses the owin.RequestQueryString value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Owin.OwinRequest.Create">
            <summary>
            Create a new empty OWIN environment dictionary and request wrapper.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Owin.OwinRequest.GetHeader(System.String)">
            <summary>
            Gets a comma separated header, or null if the given header is not present.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Owin.OwinRequest.Equals(Microsoft.Owin.OwinRequest)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Owin.OwinRequest.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Owin.OwinRequest.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Owin.OwinRequest.op_Equality(Microsoft.Owin.OwinRequest,Microsoft.Owin.OwinRequest)">
            <summary>
            
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Owin.OwinRequest.op_Inequality(Microsoft.Owin.OwinRequest,Microsoft.Owin.OwinRequest)">
            <summary>
            
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Owin.OwinRequest.Environment">
            <summary>
            The wrapped OWIN environment.
            </summary>
        </member>
        <member name="P:Microsoft.Owin.OwinRequest.Scheme">
            <summary>
            The HTTP request scheme (e.g. http or https) from owin.RequestScheme.
            </summary>
        </member>
        <member name="P:Microsoft.Owin.OwinRequest.Host">
            <summary>
            The request host, taken from the Host request header in owin.RequestHeaders.
            May include the port.
            </summary>
        </member>
        <member name="P:Microsoft.Owin.OwinRequest.PathBase">
            <summary>
            See owin.RequestPathBase.
            </summary>
        </member>
        <member name="P:Microsoft.Owin.OwinRequest.Path">
            <summary>
            The request path from owin.RequestPath.
            </summary>
        </member>
        <member name="P:Microsoft.Owin.OwinRequest.QueryString">
            <summary>
            The query string from owin.RequestQueryString.
            </summary>
        </member>
        <member name="P:Microsoft.Owin.OwinRequest.User">
            <summary>
            server.User.
            </summary>
        </member>
        <member name="P:Microsoft.Owin.OwinRequest.Method">
            <summary>
            The HTTP method/verb, e.g. GET, POST, etc..
            </summary>
        </member>
        <member name="P:Microsoft.Owin.OwinRequest.Body">
            <summary>
            The owin.RequestBody Stream.
            </summary>
        </member>
        <member name="P:Microsoft.Owin.OwinRequest.Uri">
            <summary>
            A Uri with the combine parts of owin.RequestScheme, the Host header, owin.RequestPathBase, owin.RequestPath, and owin.RequestQueryString.
            </summary>
        </member>
        <member name="P:Microsoft.Owin.OwinRequest.IsSecure">
            <summary>
            Returns true if the owin.RequestScheme is https.
            </summary>
        </member>
        <member name="T:Microsoft.Owin.OwinResponse">
            <summary>
            This wraps OWIN environment dictionary and provides strongly typed accessors.
            </summary>
        </member>
        <member name="M:Microsoft.Owin.OwinResponse.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Creates a new environment wrapper exposing response properties.
            </summary>
            <param name="environment"></param>
        </member>
        <member name="M:Microsoft.Owin.OwinResponse.#ctor(Microsoft.Owin.OwinRequest)">
            <summary>
            Creates a new environment wrapper exposing response properties.
            </summary>
            <param name="request"></param>
        </member>
        <member name="M:Microsoft.Owin.OwinResponse.AddCookie(System.String,System.String)">
            <summary>
            Appends a cookie to the response Set-Cookie header.
            </summary>
            <param name="cookieName"></param>
            <param name="cookieValue"></param>
        </member>
        <member name="M:Microsoft.Owin.OwinResponse.AddCookie(System.String,System.String,Microsoft.Owin.CookieOptions)">
            <summary>
            Appends a cookie to the response Set-Cookie header.
            </summary>
            <param name="cookieName"></param>
            <param name="cookieValue"></param>
            <param name="cookieOptions"></param>
        </member>
        <member name="M:Microsoft.Owin.OwinResponse.DeleteCookie(System.String)">
            <summary>
            Replaces the given cookie with an expired cookie.
            </summary>
            <param name="cookieName"></param>
        </member>
        <member name="M:Microsoft.Owin.OwinResponse.DeleteCookie(System.String,Microsoft.Owin.CookieOptions)">
            <summary>
            Replaces the given cookie with an expired cookie.
            </summary>
            <param name="cookieName"></param>
            <param name="cookieOptions"></param>
        </member>
        <member name="M:Microsoft.Owin.OwinResponse.AddHeader(System.String,System.String)">
            <summary>
            Append a header in the owin.ResponseHeaders.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.Owin.OwinResponse.SetHeader(System.String,System.String)">
            <summary>
            Overwrite a header in the owin.ResponseHeaders.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.Owin.OwinResponse.Redirect(System.String)">
            <summary>
            Sets a 302 response status code and the Location header.
            </summary>
            <param name="location"></param>
        </member>
        <member name="M:Microsoft.Owin.OwinResponse.Equals(Microsoft.Owin.OwinResponse)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Owin.OwinResponse.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Owin.OwinResponse.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Owin.OwinResponse.op_Equality(Microsoft.Owin.OwinResponse,Microsoft.Owin.OwinResponse)">
            <summary>
            
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Owin.OwinResponse.op_Inequality(Microsoft.Owin.OwinResponse,Microsoft.Owin.OwinResponse)">
            <summary>
            
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Owin.OwinResponse.Environment">
            <summary>
            The wrapped OWIN environment.
            </summary>
        </member>
        <member name="P:Microsoft.Owin.OwinResponse.StatusCode">
            <summary>
            The optional owin.ResponseStatusCode.
            </summary>
        </member>
        <member name="P:Microsoft.Owin.OwinResponse.ReasonPhrase">
            <summary>
            The optional owin.ResponseReasonPhrase.
            </summary>
        </member>
        <member name="P:Microsoft.Owin.OwinResponse.ContentType">
            <summary>
            The Content-Type response header.
            </summary>
        </member>
        <member name="P:Microsoft.Owin.OwinResponse.Body">
            <summary>
            The owin.ResponseBody Stream.
            </summary>
        </member>
        <member name="T:Microsoft.Owin.Logging.DiagnosticsLoggerFactory">
            <summary>
            Provides an ILoggerFactory based on System.Diagnostics.TraceSource.
            </summary>
        </member>
        <member name="M:Microsoft.Owin.Logging.DiagnosticsLoggerFactory.#ctor">
            <summary>
            Creates a factory named "Microsoft.Owin".
            </summary>
        </member>
        <member name="M:Microsoft.Owin.Logging.DiagnosticsLoggerFactory.#ctor(System.Diagnostics.SourceSwitch,System.Diagnostics.TraceListener)">
            <summary>
            
            </summary>
            <param name="rootSourceSwitch"></param>
            <param name="rootTraceListener"></param>
        </member>
        <member name="M:Microsoft.Owin.Logging.DiagnosticsLoggerFactory.Create(System.String)">
            <summary>
            Creates a new DiagnosticsLogger for the given component name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Owin.Logging.LoggerExtensions">
            <summary>
            ILogger extension methods for common scenarios.
            </summary>
        </member>
        <member name="M:Microsoft.Owin.Logging.LoggerExtensions.IsEnabled(Microsoft.Owin.Logging.ILogger,System.Diagnostics.TraceEventType)">
            <summary>
            Checks if the given TraceEventType is enabled.
            </summary>
            <param name="logger"></param>
            <param name="eventType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Owin.Logging.LoggerExtensions.WriteVerbose(Microsoft.Owin.Logging.ILogger,System.String)">
            <summary>
            Writes a verbose log message.
            </summary>
            <param name="logger"></param>
            <param name="data"></param>
        </member>
        <member name="M:Microsoft.Owin.Logging.LoggerExtensions.WriteInformation(Microsoft.Owin.Logging.ILogger,System.String)">
            <summary>
            Writes an informational log message.
            </summary>
            <param name="logger"></param>
            <param name="message"></param>
        </member>
        <member name="M:Microsoft.Owin.Logging.LoggerExtensions.WriteWarning(Microsoft.Owin.Logging.ILogger,System.String,System.String[])">
            <summary>
            Writes a warning log message.
            </summary>
            <param name="logger"></param>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:Microsoft.Owin.Logging.LoggerExtensions.WriteWarning(Microsoft.Owin.Logging.ILogger,System.String,System.Exception)">
            <summary>
            Writes a warning log message.
            </summary>
            <param name="logger"></param>
            <param name="message"></param>
            <param name="error"></param>
        </member>
        <member name="M:Microsoft.Owin.Logging.LoggerExtensions.WriteError(Microsoft.Owin.Logging.ILogger,System.String)">
            <summary>
            Writes an error log message.
            </summary>
            <param name="logger"></param>
            <param name="message"></param>
        </member>
        <member name="M:Microsoft.Owin.Logging.LoggerExtensions.WriteError(Microsoft.Owin.Logging.ILogger,System.String,System.Exception)">
            <summary>
            Writes an error log message.
            </summary>
            <param name="logger"></param>
            <param name="message"></param>
            <param name="error"></param>
        </member>
        <member name="M:Microsoft.Owin.Logging.LoggerExtensions.WriteCritical(Microsoft.Owin.Logging.ILogger,System.String)">
            <summary>
            Writes a critical log message.
            </summary>
            <param name="logger"></param>
            <param name="message"></param>
        </member>
        <member name="M:Microsoft.Owin.Logging.LoggerExtensions.WriteCritical(Microsoft.Owin.Logging.ILogger,System.String,System.Exception)">
            <summary>
            Writes a critical log message.
            </summary>
            <param name="logger"></param>
            <param name="message"></param>
            <param name="error"></param>
        </member>
    </members>
</doc>
